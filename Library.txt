local TweenService = game:GetService("TweenService")
local InputService = game:GetService("UserInputService")
local Players = game:GetService("Players")

local Library = {
    Theme = {
        Font = "RobotoMono",
        AccentColor = Color3.fromRGB(0, 175, 255),
        FontColor = Color3.fromRGB(255, 255, 255),
        HideKey = "LeftAlt"
    }
}

local CreateModule = {
    reg = {}
}

local function AddToReg(Instance)
    table.insert(CreateModule.reg, Instance)
end

function CreateModule.Instance(instance, properties)
    local CreatedInstance = Instance.new(instance)
    for property, value in pairs(properties) do
        CreatedInstance[property] = value
    end
    return CreatedInstance
end

local function Darker(Col, coe)
    local H, S, V = Color3.toHSV(Col)
    return Color3.fromHSV(H, S, V / (coe or 1.5))
end

local function Brighter(Col, coe)
    local H, S, V = Color3.toHSV(Col)
    return Color3.fromHSV(H, S, V * (coe or 1.5))
end

function Library.Main(Name, X, Y)
    for _, v in pairs(game.CoreGui:GetChildren()) do
        if v.Name == "OcerLib" then
            v:Destroy()
        end
    end

    local OcerLib = CreateModule.Instance("ScreenGui", {
        Name = "OcerLib",
        Parent = game.CoreGui,
        ResetOnSpawn = false
    })

    local Load = CreateModule.Instance("Frame", {
        Name = "LoadFrame",
        Parent = OcerLib,
        BackgroundColor3 = Color3.fromRGB(30, 30, 35),
        BackgroundTransparency = 1,
        BorderSizePixel = 0,
        Position = UDim2.new(0.5, -275, 0.5, -175),
        Size = UDim2.new(0, 550, 0, 350),
        ZIndex = 5
    })

    CreateModule.Instance("UICorner", {
        Parent = Load,
        Name = "Corner",
        CornerRadius = UDim.new(0, 5)
    })

    local Topbar = CreateModule.Instance("Frame", {
        Name = "Topbar",
        Parent = OcerLib,
        BackgroundColor3 = Darker(Color3.fromRGB(30, 30, 35), 1.15),
        BorderSizePixel = 0,
        Position = UDim2.new(0.5, -275, 0.5, -175),
        Size = UDim2.new(0, 550, 0, 30),
        Active = true,
        Draggable = true,
        Visible = false,
        ZIndex = 3
    })

    CreateModule.Instance("UICorner", {
        Parent = Topbar,
        Name = "Corner",
        CornerRadius = UDim.new(0, 5)
    })

    Topbar.Changed:Connect(function(Property)
        if Property == "Position" then
            Load.Position = Topbar.Position
        end
    end)

    CreateModule.Instance("TextLabel", {
        Parent = Topbar,
        Font = Enum.Font[Library.Theme.Font],
        Text = Name,
        TextSize = 16,
        TextColor3 = Library.Theme.FontColor,
        TextXAlignment = Enum.TextXAlignment.Left,
        BackgroundTransparency = 1,
        BorderSizePixel = 0,
        Position = UDim2.new(0, 10, 0, 0),
        Size = UDim2.new(1, 0, 1, 0),
        ZIndex = 3
    })

    local Container = CreateModule.Instance("Frame", {
        Parent = Topbar,
        Name = "Container",
        BackgroundColor3 = Color3.fromRGB(30, 30, 33),
        BorderSizePixel = 0,
        Position = UDim2.new(0, 0, 1, -5),
        Size = UDim2.new(1, 0, 0, 320),
        ClipsDescendants = true
    })

    spawn(function()
        wait(0.2)
        TweenService:Create(Load, TweenInfo.new(0.3), {BackgroundTransparency = 0}):Play()
        wait(0.45)
        TweenService:Create(Load, TweenInfo.new(0.3), {BackgroundTransparency = 1}):Play()
        Topbar.Visible = true
    end)

    CreateModule.Instance("UICorner", {
        Parent = Container,
        Name = "Corner",
        CornerRadius = UDim.new(0, 5)
    })

    local TabContainer = CreateModule.Instance("ScrollingFrame", {
        Parent = Container,
        Name = "TabContainer",
        BackgroundTransparency = 1,
        BorderSizePixel = 0,
        Position = UDim2.new(0, 5, 0, 15),
        Size = UDim2.new(0, 150, 1, -20),
        CanvasSize = UDim2.new(0, 0, 0, 0),
        AutomaticCanvasSize = Enum.AutomaticSize.Y,
        ScrollBarThickness = 3,
        ScrollBarImageTransparency = 0.9,
        ScrollBarImageColor3 = Color3.fromRGB(255, 255, 255)
    })

    local TabList = CreateModule.Instance("UIListLayout", {
        Parent = TabContainer,
        FillDirection = Enum.FillDirection.Vertical,
        SortOrder = Enum.SortOrder.LayoutOrder,
        Padding = UDim.new(0, 5)
    })

    TabList:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
        TabContainer.CanvasSize = UDim2.new(0, 0, 0, TabList.AbsoluteContentSize.Y + 4)
    end)

    local Pages = CreateModule.Instance("Frame", {
        Parent = Container,
        Name = "Tabs",
        BackgroundTransparency = 1,
        BorderSizePixel = 0,
        Position = UDim2.new(0, 160, 0, 5),
        Size = UDim2.new(0, 385, 1, -10)
    })

    local PageLayout = CreateModule.Instance("UIPageLayout", {
        Parent = Pages,
        Name = "PagesLayout",
        Padding = UDim.new(0, 10),
        TweenTime = 0,
        EasingDirection = Enum.EasingDirection.Out,
        EasingStyle = Enum.EasingStyle.Sine,
        FillDirection = Enum.FillDirection.Vertical,
        HorizontalAlignment = Enum.HorizontalAlignment.Center
    })

    InputService.InputBegan:Connect(function(input, IsTyping)
        if input.KeyCode == Enum.KeyCode[Library.Theme.HideKey] and not IsTyping then
            spawn(function()
                TweenService:Create(Load, TweenInfo.new(0.15), {BackgroundTransparency = 0}):Play()
                wait(0.2)
                TweenService:Create(Load, TweenInfo.new(0.3), {BackgroundTransparency = 1}):Play()
                Topbar.Visible = not Topbar.Visible
            end)
        end
    end)

    local InMain = {}
    local TabCount = 0

    function InMain.Tab(Text)
        TabCount = TabCount + 1

        local TabButton = CreateModule.Instance("TextButton", {
            Parent = TabContainer,
            Name = "TabButton",
            BackgroundColor3 = Darker(Color3.fromRGB(32, 32, 37), 1.15),
            BorderSizePixel = 0,
            Size = UDim2.new(1, -10, 0, 35),
            Font = Enum.Font[Library.Theme.Font],
            Text = Text,
            TextSize = 15,
            TextXAlignment = Enum.TextXAlignment.Center,
            AutoButtonColor = false,
            ZIndex = 3
        })

        CreateModule.Instance("UICorner", {
            Parent = TabButton,
            Name = "Corner",
            CornerRadius = UDim.new(0, 5)
        })

        CreateModule.Instance("UIStroke", {
            Parent = TabButton,
            Name = "Stroke",
            Thickness = 1,
            Color = Color3.fromRGB(40, 40, 40),
            ApplyStrokeMode = Enum.ApplyStrokeMode.Border
        })

        local IsTabActive = CreateModule.Instance("BoolValue", {
            Parent = TabButton,
            Name = "IsActive",
            Value = (TabCount == 1)
        })

        TabButton.TextColor3 = (IsTabActive.Value and Library.Theme.FontColor or Darker(Library.Theme.FontColor, 2))

        TabButton.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.Touch then
                if IsTabActive.Value then
                    TweenService:Create(TabButton, TweenInfo.new(0.3), {TextColor3 = Library.Theme.FontColor}):Play()
                    TweenService:Create(TabButton, TweenInfo.new(0.3), {BackgroundColor3 = Darker(Color3.fromRGB(32, 32, 37), 1.15)}):Play()
                else
                    TweenService:Create(TabButton, TweenInfo.new(0.3), {TextColor3 = Darker(Library.Theme.FontColor, 1.5)}):Play()
                    TweenService:Create(TabButton, TweenInfo.new(0.3), {BackgroundColor3 = Color3.fromRGB(32, 32, 37)}):Play()
                end
            end
        end)

        TabButton.InputEnded:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.Touch then
                if not IsTabActive.Value then
                    TweenService:Create(TabButton, TweenInfo.new(0.3), {TextColor3 = Darker(Library.Theme.FontColor, 2)}):Play()
                    TweenService:Create(TabButton, TweenInfo.new(0.3), {BackgroundColor3 = Darker(Color3.fromRGB(32, 32, 37), 1.15)}):Play()
                else
                    TweenService:Create(TabButton, TweenInfo.new(0.3), {TextColor3 = Darker(Library.Theme.FontColor, 1.2)}):Play()
                    TweenService:Create(TabButton, TweenInfo.new(0.3), {BackgroundColor3 = Darker(Color3.fromRGB(32, 32, 37), 1.15)}):Play()
                end
            end
        end)

        local Page = CreateModule.Instance("ScrollingFrame", {
            Parent = Pages,
            Name = Text,
            BackgroundTransparency = 1,
            BorderSizePixel = 0,
            Position = UDim2.new(0, 0, 0, 0),
            Size = UDim2.new(1, 0, 1, 0),
            CanvasSize = UDim2.new(0, 0, 0, 0),
            AutomaticCanvasSize = Enum.AutomaticSize.Y,
            ScrollBarThickness = 3,
            ScrollBarImageTransparency = 0.9,
            ScrollBarImageColor3 = Color3.fromRGB(255, 255, 255)
        })

        local PageList = CreateModule.Instance("Frame", {
            Parent = Page,
            Name = "PageList",
            BackgroundTransparency = 1,
            BorderSizePixel = 0,
            Position = UDim2.new(0.015, 0, 0.015, 0),
            Size = UDim2.new(1, 0, 1, 0)
        })

        local ElementsList = CreateModule.Instance("UIListLayout", {
            Parent = PageList,
            Padding = UDim.new(0, 5),
            HorizontalAlignment = Enum.HorizontalAlignment.Left,
            SortOrder = Enum.SortOrder.LayoutOrder
        })

        local Fader = CreateModule.Instance("Frame", {
            Parent = Page,
            Name = "Fader",
            BackgroundColor3 = Color3.fromRGB(30, 30, 33),
            BorderSizePixel = 0,
            Position = UDim2.new(0, 0, 0, 0),
            Size = UDim2.new(1, 0, 1, 0),
            ZIndex = 2
        })

        CreateModule.Instance("Frame", {
            Parent = PageList,
            Name = "ign",
            BackgroundTransparency = 1,
            BorderSizePixel = 0,
            Position = UDim2.new(0, 0, 0, 0),
            Size = UDim2.new(0, 0, 0, 0),
            LayoutOrder = -99
        })

        CreateModule.Instance("Frame", {
            Parent = PageList,
            Name = "ign",
            BackgroundTransparency = 1,
            BorderSizePixel = 0,
            Position = UDim2.new(0, 0, 0, 0),
            Size = UDim2.new(0, 0, 0, 5),
            LayoutOrder = 999
        })

        TabButton.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.Touch then
                for _, v in pairs(Pages:GetChildren()) do
                    if v.Name ~= Text and v:FindFirstChild("Fader") then
                        TweenService:Create(v.Fader, TweenInfo.new(0.3), {BackgroundTransparency = 0}):Play()
                        spawn(function()
                            wait(0.32)
                            PageLayout:JumpTo(Page)
                            TweenService:Create(Fader, TweenInfo.new(0.3), {BackgroundTransparency = 1}):Play()
                        end)
                    end
                end

                for _, v in pairs(TabContainer:GetChildren()) do
                    if v.ClassName == "TextButton" and v.Name ~= Text then
                        v.IsActive.Value = false
                        TweenService:Create(v, TweenInfo.new(0.3), {TextColor3 = Darker(Library.Theme.FontColor, 2)}):Play()
                        TweenService:Create(v, TweenInfo.new(0.3), {BackgroundColor3 = Darker(Color3.fromRGB(32, 32, 37), 1.15)}):Play()
                    end
                end
                IsTabActive.Value = true
                TweenService:Create(TabButton, TweenInfo.new(0.3), {TextColor3 = Library.Theme.FontColor}):Play()
                TweenService:Create(TabButton, TweenInfo.new(0.3), {BackgroundColor3 = Darker(Color3.fromRGB(32, 32, 37), 1.15)}):Play()
            end
        end)

        if TabCount == 1 then
            PageLayout:JumpTo(Page)
            TweenService:Create(Fader, TweenInfo.new(0.3), {BackgroundTransparency = 1}):Play()
        end

        local InPage = {}

        function InPage.Button(config)
            local Button = CreateModule.Instance("TextButton", {
                Parent = PageList,
                Name = config.Name,
                BackgroundColor3 = Darker(Color3.fromRGB(32, 32, 37), 1.15),
                BorderSizePixel = 1,
                BorderColor3 = Color3.fromRGB(40, 40, 40),
                Position = UDim2.new(0, 0, 0, 0),
                Size = UDim2.new(0.95, 0, 0, 30),
                Font = Enum.Font[Library.Theme.Font],
                Text = config.Name,
                TextSize = 16,
                TextColor3 = Darker(Library.Theme.FontColor, 1.5),
                TextXAlignment = Enum.TextXAlignment.Center,
                TextYAlignment = Enum.TextYAlignment.Center,
                AutoButtonColor = false
            })

            CreateModule.Instance("UICorner", {
                Parent = Button,
                Name = "Corner",
                CornerRadius = UDim.new(0, 5)
            })

            CreateModule.Instance("UIStroke", {
                Parent = Button,
                Name = "Stroke",
                Thickness = 1,
                Color = Color3.fromRGB(40, 40, 40),
                ApplyStrokeMode = Enum.ApplyStrokeMode.Border
            })

            Button.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.Touch then
                    TweenService:Create(Button, TweenInfo.new(0.3), {TextColor3 = Library.Theme.FontColor}):Play()
                    TweenService:Create(Button, TweenInfo.new(0.3), {BackgroundColor3 = Color3.fromRGB(32, 32, 37)}):Play()
                end
            end)

            Button.InputEnded:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.Touch then
                    TweenService:Create(Button, TweenInfo.new(0.3), {TextColor3 = Darker(Library.Theme.FontColor, 1.5)}):Play()
                    TweenService:Create(Button, TweenInfo.new(0.3), {BackgroundColor3 = Darker(Color3.fromRGB(32, 32, 37), 1.15)}):Play()
                end
            end)

            Button.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.Touch then
                    spawn(function() config.Callback() end)
                end
            end)

            AddToReg(Button)
            return Button
        end

        function InPage.Checkbox(config)
            local Checkbox = CreateModule.Instance("TextButton", {
                Parent = PageList,
                Name = config.Name,
                BackgroundTransparency = 1,
                BorderSizePixel = 0,
                BorderColor3 = Color3.fromRGB(60, 60, 60),
                Position = UDim2.new(0, 0, 0, 0),
                Size = UDim2.new(0.95, 0, 0, 30),
                Font = Enum.Font[Library.Theme.Font],
                Text = "",
                TextSize = 16,
                TextXAlignment = Enum.TextXAlignment.Left,
                AutoButtonColor = false
            })

            CreateModule.Instance("UICorner", {
                Parent = Checkbox,
                Name = "Corner",
                CornerRadius = UDim.new(0, 5)
            })

            CreateModule.Instance("UIStroke", {
                Parent = Checkbox,
                Name = "Stroke",
                Thickness = 1,
                Color = Color3.fromRGB(40, 40, 40),
                ApplyStrokeMode = Enum.ApplyStrokeMode.Border
            })

            CreateModule.Instance("TextLabel", {
                Parent = Checkbox,
                Name = "Label",
                BackgroundTransparency = 1,
                BorderSizePixel = 0,
                BorderColor3 = Color3.fromRGB(60, 60, 60),
                Position = UDim2.new(0, 27, 0, 0),
                Size = UDim2.new(1, -25, 1, 0),
                Font = Enum.Font[Library.Theme.Font],
                Text = config.Name,
                TextSize = 16,
                TextXAlignment = Enum.TextXAlignment.Left
            })

            local IsActive = CreateModule.Instance("BoolValue", {
                Parent = Checkbox,
                Name = "IsActive"
            })

            IsActive.Value = config.Default or false

            local Checked = CreateModule.Instance("Frame", {
                Parent = Checkbox,
                Name = "Cube",
                BackgroundTransparency = 0,
                BackgroundColor3 = (IsActive.Value and Library.Theme.AccentColor or Darker(Color3.fromRGB(32, 32, 37), 1.15)),
                BorderSizePixel = 0,
                AnchorPoint = Vector2.new(0, 0.5),
                Position = UDim2.new(0, 5, 0.5, 0),
                Size = UDim2.new(0, 20, 0, 20)
            })

            CreateModule.Instance("UICorner", {
                Parent = Checked,
                Name = "Corner",
                CornerRadius = UDim.new(0, 5)
            })

            CreateModule.Instance("UIStroke", {
                Parent = Checked,
                Name = "Stroke",
                Thickness = 1,
                Color = Color3.fromRGB(40, 40, 40)
            })

            IsActive.Changed:Connect(function()
                if IsActive.Value then
                    TweenService:Create(Checked, TweenInfo.new(0.3), {BackgroundColor3 = Library.Theme.AccentColor}):Play()
                    spawn(function() config.Callback(IsActive.Value) end)
                else
                    TweenService:Create(Checked, TweenInfo.new(0.3), {BackgroundColor3 = Darker(Color3.fromRGB(32, 32, 37), 1.15)}):Play()
                    spawn(function() config.Callback(IsActive.Value) end)
                end
            end)

            Checkbox.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.Touch then
                    IsActive.Value = not IsActive.Value
                end
            end)

            AddToReg(Checkbox)
            return Checkbox
        end

        function InPage.Slider(config)
            local Slider = CreateModule.Instance("TextLabel", {
                Parent = PageList,
                Name = config.Name,
                BackgroundTransparency = 1,
                BorderSizePixel = 0,
                BorderColor3 = Color3.fromRGB(60, 60, 60),
                Position = UDim2.new(0, 22, 0, 0),
                Size = UDim2.new(0.95, 0, 0, 50),
                Font = Enum.Font[Library.Theme.Font],
                TextColor3 = Darker(Library.Theme.FontColor, 1.5),
                Text = config.Name,
                TextSize = 16,
                TextXAlignment = Enum.TextXAlignment.Center,
                TextYAlignment = Enum.TextYAlignment.Top
            })

            local Bar = CreateModule.Instance("Frame", {
                Parent = Slider,
                Name = "Bar",
                BackgroundTransparency = 0,
                BackgroundColor3 = Darker(Color3.fromRGB(32, 32, 37), 1.15),
                BorderSizePixel = 0,
                AnchorPoint = Vector2.new(0, 0.5),
                Position = UDim2.new(0, 0, 0.75, 0),
                Size = UDim2.new(1, 0, 0, 25),
                ClipsDescendants = true
            })

            local ValueLabel = CreateModule.Instance("TextLabel", {
                Parent = Bar,
                Name = "Label",
                BackgroundTransparency = 1,
                BorderSizePixel = 0,
                BorderColor3 = Color3.fromRGB(60, 60, 60),
                Position = UDim2.new(0, 0, 0, 0),
                Size = UDim2.new(1, 0, 1, 0),
                Font = Enum.Font[Library.Theme.Font],
                TextColor3 = Darker(Library.Theme.FontColor, 1.5),
                Text = tostring(config.Default) .. "/" .. config.Max,
                TextSize = 16,
                TextXAlignment = Enum.TextXAlignment.Center,
                ZIndex = 2
            })

            local Progress = CreateModule.Instance("Frame", {
                Parent = Bar,
                Name = "Progress",
                BackgroundTransparency = 0,
                BackgroundColor3 = Darker(Color3.fromRGB(32, 32, 37), 1.05),
                BorderSizePixel = 0,
                AnchorPoint = Vector2.new(0, 0.5),
                Position = UDim2.new(0, 0, 0.5, 0),
                Size = UDim2.new(0, 0, 1, 0)
            })

            CreateModule.Instance("UICorner", {
                Parent = Bar,
                Name = "Corner",
                CornerRadius = UDim.new(0, 5)
            })

            CreateModule.Instance("UIStroke", {
                Parent = Bar,
                Name = "Stroke",
                Thickness = 1,
                Color = Color3.fromRGB(40, 40, 40)
            })

            CreateModule.Instance("UICorner", {
                Parent = Progress,
                Name = "Corner",
                CornerRadius = UDim.new(0, 5)
            })

            local function UpdateSlider(val)
                local percent = (val - config.Min) / (config.Max - config.Min)
                percent = math.clamp(percent, 0, 1)
                Progress:TweenSize(UDim2.new(percent, 0, 1, 0), "Out", "Sine", 1, true)
            end

            UpdateSlider(config.Default)

            local IsSliding, Dragging = false, false
            local RealValue = config.Default
            local value

            local function move(posX)
                local pos = UDim2.new(math.clamp((posX - Bar.AbsolutePosition.X) / Bar.AbsoluteSize.X, 0, 1), 0, 1, 0)
                local size = UDim2.new(math.clamp((posX - Bar.AbsolutePosition.X) / Bar.AbsoluteSize.X, 0, 1), 0, 1, 0)
                Progress:TweenSize(size, "Out", "Quart", 0.2, true)
                RealValue = (((pos.X.Scale * config.Max) / config.Max) * (config.Max - config.Min) + config.Min)
                value = (config.Precise and string.format("%.1f", tostring(RealValue))) or (math.floor(RealValue))
                ValueLabel.Text = tostring(value) .. "/" .. config.Max
                config.Callback(value)
            end

            Bar.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.Touch then
                    Dragging = true
                    IsSliding = false
                    move(input.Position.X)
                    TweenService:Create(Progress, TweenInfo.new(0.3), {BackgroundColor3 = Darker(Library.Theme.AccentColor, 1.2)}):Play()
                end
            end)

            Bar.InputEnded:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.Touch then
                    Dragging = false
                    IsSliding = false
                    TweenService:Create(Progress, TweenInfo.new(0.3), {BackgroundColor3 = Darker(Library.Theme.AccentColor, 1.7)}):Play()
                    move(input.Position.X)
                end
            end)

            InputService.InputChanged:Connect(function(input)
                if Dragging and input.UserInputType == Enum.UserInputType.Touch then
                    move(input.Position.X)
                end
            end)

            Bar.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.Touch then
                    TweenService:Create(Progress, TweenInfo.new(0.3), {BackgroundColor3 = Darker(Library.Theme.AccentColor, 1.7)}):Play()
                end
            end)

            Bar.InputEnded:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.Touch and not Dragging then
                    TweenService:Create(Progress, TweenInfo.new(0.3), {BackgroundColor3 = Darker(Color3.fromRGB(32, 32, 37), 1.05)}):Play()
                end
            end)

            AddToReg(Slider)
            return Slider
        end

        function InPage.Dropdown(config)
            local Dropdown = CreateModule.Instance("Frame", {
                Parent = PageList,
                Name = config.Name,
                BackgroundTransparency = 1,
                BorderSizePixel = 0,
                BorderColor3 = Color3.fromRGB(40, 40, 40),
                Position = UDim2.new(0, 0, 0, 0),
                Size = UDim2.new(0.95, 0, 0, 50),
                ClipsDescendants = true
            })

            local TitleLabel = CreateModule.Instance("TextLabel", {
                Parent = Dropdown,
                Name = "Title",
                BackgroundTransparency = 1,
                BorderSizePixel = 0,
                Position = UDim2.new(0, 0, 0, 0),
                Size = UDim2.new(1, 0, 0, 20),
                Font = Enum.Font[Library.Theme.Font],
                TextColor3 = Darker(Library.Theme.FontColor, 1.5),
                Text = config.Name,
                TextSize = 16,
                TextXAlignment = Enum.TextXAlignment.Center,
                TextYAlignment = Enum.TextYAlignment.Top
            })

            local DropdownFrame = CreateModule.Instance("Frame", {
                Parent = Dropdown,
                Name = "DropdownFrame",
                BackgroundColor3 = Darker(Color3.fromRGB(32, 32, 37), 1.15),
                BorderSizePixel = 0,
                Position = UDim2.new(0, 0, 0, 20),
                Size = UDim2.new(1, 0, 0, 30),
                ClipsDescendants = true
            })

            local DropdownButton = CreateModule.Instance("TextButton", {
                Parent = DropdownFrame,
                Name = "DropdownButton",
                BackgroundTransparency = 1,
                BorderSizePixel = 0,
                BorderColor3 = Color3.fromRGB(40, 40, 40),
                Position = UDim2.new(0, 0, 0, 0),
                Size = UDim2.new(1, 0, 0, 30),
                Font = Enum.Font[Library.Theme.Font],
                Text = "  " .. (config.Default or config.Values[1]),
                TextSize = 16,
                TextColor3 = Darker(Library.Theme.FontColor, 1.5),
                TextXAlignment = Enum.TextXAlignment.Left,
                TextYAlignment = Enum.TextYAlignment.Center,
                AutoButtonColor = false
            })

            local DropdownImage = CreateModule.Instance("ImageLabel", {
                Parent = DropdownButton,
                AnchorPoint = Vector2.new(0, 0.5),
                BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                BackgroundTransparency = 1,
                BorderSizePixel = 0,
                Position = UDim2.new(0.9, 0, 0.5, 0),
                Size = UDim2.new(0, 25, 0, 25),
                Image = "rbxassetid://3926305904",
                ImageColor3 = Color3.fromRGB(136, 136, 136),
                ImageRectOffset = Vector2.new(44, 404),
                ImageRectSize = Vector2.new(36, 36),
                Rotation = 0
            })

            local List = CreateModule.Instance("ScrollingFrame", {
                Parent = DropdownFrame,
                Name = "List",
                BackgroundTransparency = 1,
                BorderSizePixel = 0,
                Position = UDim2.new(0, 0, 0, 30),
                Size = UDim2.new(1, 0, 0, 0),
                CanvasSize = UDim2.new(0, 0, 0, 0),
                AutomaticCanvasSize = Enum.AutomaticSize.Y,
                ScrollBarThickness = 3,
                ScrollBarImageTransparency = 0.9,
                ScrollBarImageColor3 = Color3.fromRGB(255, 255, 255)
            })

            CreateModule.Instance("UIListLayout", {
                Parent = List,
                Padding = UDim.new(0, 5),
                HorizontalAlignment = Enum.HorizontalAlignment.Center,
                SortOrder = Enum.SortOrder.LayoutOrder
            })

            CreateModule.Instance("Frame", {
                Parent = List,
                Name = "ign",
                BackgroundTransparency = 1,
                BorderSizePixel = 0,
                Position = UDim2.new(0, 0, 0, 0),
                Size = UDim2.new(0, 0, 0, 0),
                LayoutOrder = -99999
            })

            CreateModule.Instance("UICorner", {
                Parent = DropdownFrame,
                Name = "Corner",
                CornerRadius = UDim.new(0, 5)
            })

            CreateModule.Instance("UIStroke", {
                Parent = DropdownFrame,
                Name = "Stroke",
                Thickness = 1,
                Color = Color3.fromRGB(40, 40, 40),
                ApplyStrokeMode = Enum.ApplyStrokeMode.Border
            })

            local IsOpened = false

            DropdownButton.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.Touch then
                    IsOpened = not IsOpened
                    if IsOpened then
                        DropdownFrame:TweenSize(UDim2.new(1, 0, 0, 130), "Out", "Quart", 0.3, true)
                        List:TweenSize(UDim2.new(1, 0, 0, 100), "Out", "Quart", 0.3, true)
                        TweenService:Create(DropdownImage, TweenInfo.new(0.3), {Rotation = 180}):Play()
                    else
                        DropdownFrame:TweenSize(UDim2.new(1, 0, 0, 30), "Out", "Quart", 0.3, true)
                        List:TweenSize(UDim2.new(1, 0, 0, 0), "Out", "Quart", 0.3, true)
                        TweenService:Create(DropdownImage, TweenInfo.new(0.3), {Rotation = 0}):Play()
                    end
                end
            end)

            local function NewSelectable(string, value)
                local Selectable = CreateModule.Instance("TextButton", {
                    Parent = List,
                    Name = string,
                    BackgroundTransparency = 1,
                    BorderSizePixel = 0,
                    BorderColor3 = Color3.fromRGB(40, 40, 40),
                    Position = UDim2.new(0, 0, 0, 0),
                    Size = UDim2.new(0.95, 0, 0, 30),
                    Font = Enum.Font[Library.Theme.Font],
                    Text = "  " .. string,
                    TextSize = 16,
                    TextColor3 = Darker(Library.Theme.FontColor, 1.5),
                    TextXAlignment = Enum.TextXAlignment.Left,
                    TextYAlignment = Enum.TextYAlignment.Center,
                    AutoButtonColor = false
                })

                CreateModule.Instance("UICorner", {
                    Parent = Selectable,
                    Name = "Corner",
                    CornerRadius = UDim.new(0, 5)
                })

                CreateModule.Instance("UIStroke", {
                    Parent = Selectable,
                    Name = "Stroke",
                    Thickness = 1,
                    Color = Color3.fromRGB(40, 40, 40),
                    ApplyStrokeMode = Enum.ApplyStrokeMode.Border
                })

                Selectable.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.Touch then
                        TweenService:Create(Selectable, TweenInfo.new(0.3), {TextColor3 = Library.Theme.FontColor}):Play()
                        TweenService:Create(Selectable, TweenInfo.new(0.3), {BackgroundColor3 = Color3.fromRGB(32, 32, 37)}):Play()
                    end
                end)

                Selectable.InputEnded:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.Touch then
                        TweenService:Create(Selectable, TweenInfo.new(0.3), {TextColor3 = Darker(Library.Theme.FontColor, 1.5)}):Play()
                        TweenService:Create(Selectable, TweenInfo.new(0.3), {BackgroundColor3 = Darker(Color3.fromRGB(32, 32, 37), 1.15)}):Play()
                    end
                end)

                Selectable.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.Touch then
                        spawn(function() config.Callback(string, value) end)
                        DropdownButton.Text = "  " .. string
                        DropdownFrame:TweenSize(UDim2.new(1, 0, 0, 30), "Out", "Quart", 0.3, true)
                        List:TweenSize(UDim2.new(1, 0, 0, 0), "Out", "Quart", 0.3, true)
                        TweenService:Create(DropdownImage, TweenInfo.new(0.3), {Rotation = 0}):Play()
                        IsOpened = false
                    end
                end)
            end

            for string, value in pairs(config.Values) do
                if config.Index == 1 then
                    NewSelectable(tostring(string), tostring(value))
                elseif config.Index == 2 then
                    NewSelectable(tostring(value), tostring(string))
                end
            end

            local InDropdown = {}
            function InDropdown.Refresh(selec)
                for _, v in pairs(List:GetChildren()) do
                    if v.ClassName == "TextButton" then
                        v:Destroy()
                    end
                end
                wait()
                for string, value in pairs(selec) do
                    if config.Index == 1 then
                        NewSelectable(tostring(string), tostring(value))
                    elseif config.Index == 2 then
                        NewSelectable(tostring(value), tostring(string))
                    end
                end
            end

            AddToReg(Dropdown)
            return InDropdown
        end

        return InPage
    end

    return InMain
end

return Library